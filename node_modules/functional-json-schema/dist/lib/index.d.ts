import { JSONSchema6 } from "json-schema";
export interface ArrayTypeDescriptor {
    __typename: 'ArrayTypeDescriptor';
    name: keyof JSONSchema6;
    rawType: TypeDescriptor[];
    required: boolean;
}
export interface TypeDescriptor {
    __typename: 'TypeDescriptor';
    rawType: JSONSchema6;
    required: boolean;
}
export declare type TypeDescriptorOptions = {
    required: boolean;
};
export interface SchemaDescriptor {
    [k: string]: TypeDescriptor | ArrayTypeDescriptor | SchemaDescriptor;
}
export interface SchemaDescriptorOptions {
    schema: JSONSchema6['$schema'];
}
export declare const schema: (schemaDescriptor: SchemaDescriptor, definitions?: {
    [k: string]: boolean | JSONSchema6;
}, options?: SchemaDescriptorOptions) => JSONSchema6;
export declare namespace types {
    const normalize: (typeDescriptor: "string" | "number" | "boolean" | "object" | "integer" | "array" | "null" | "any" | TypeDescriptor) => TypeDescriptor;
    const allOf: (...typeDescriptors: ("string" | "number" | "boolean" | "object" | "integer" | "array" | "null" | "any" | TypeDescriptor)[]) => ArrayTypeDescriptor;
    const anyOf: (...typeDescriptors: ("string" | "number" | "boolean" | "object" | "integer" | "array" | "null" | "any" | TypeDescriptor)[]) => ArrayTypeDescriptor;
    const oneOf: (...typeDescriptors: ("string" | "number" | "boolean" | "object" | "integer" | "array" | "null" | "any" | TypeDescriptor)[]) => ArrayTypeDescriptor;
    const enumOf: (...typeDescriptors: ("string" | "number" | "boolean" | "object" | "integer" | "array" | "null" | "any" | TypeDescriptor)[]) => ArrayTypeDescriptor;
    const arrayOf: (typeDescriptor: "string" | "number" | "boolean" | "object" | "integer" | "array" | "null" | "any" | TypeDescriptor, options?: TypeDescriptorOptions) => TypeDescriptor;
    const definition: (ref: string) => TypeDescriptor;
    const type: (type: "string" | "number" | "boolean" | "object" | "integer" | "array" | "null" | "any", options?: TypeDescriptorOptions) => TypeDescriptor;
}
export declare namespace constraints {
    const required: <T extends ArrayTypeDescriptor | TypeDescriptor>(typeDescriptor: T, required: boolean) => T;
    const pattern: (reg: RegExp) => void;
}
